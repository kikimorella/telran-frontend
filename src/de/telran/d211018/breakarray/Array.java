package de.telran.d211018.breakarray;
/*Представьте себе ячейки в камере хранения. Каждая имеет свой номер, и в каждой хранится какой-то объект “Багаж”.
    Или винная карта, в которой все виды вина пронумерованы и когда вы делаете заказ, вам достаточно назвать номер
    напитка. Или список студентов группы, в котором в первой ячейке будет записан студент “Андреев”, а в последней —
    “Яковлев”. Или список пассажиров самолёта, за каждым из которых закреплено место с определённым номером. В Java
    чтобы работать с подобными структурами, то есть множеством однородных данных, часто используют массивы в Java.

     Массив — это структура данных, в которой хранятся элементы одного типа. Его можно представить, как набор
     пронумерованных ячеек, в каждую из которых можно поместить какие-то данные (один элемент данных в одну ячейку).
     Доступ к конкретной ячейке осуществляется через её номер. Номер элемента в массиве также называют индексом. */

// массив - это что-то, где мы не знаем сколько будет данных
// батарея коробочек, у каждой коробочки есть индекс от 0. у каждой коробочки свой номер
// 90 239 -5  26 и.тд
// 0   1   2   3
public class Array { // тебе нужно ещё раз прослушать

    public static void main(String[] args) {
        // Как и любой другой объект, создать массив Java, то есть зарезервировать под него место в памяти, можно с
        // помощью оператора new. Делается это так: new typeOfArray [length];

        int[] intArray = new int[]{10, -15, 8}; // это элементы масслива и их можно заменить
        // память (размер) на массив задается 1 раз и не меняется, но можно той же переменной дать другой массив

        intArray = new int[5]; // {0,0,0,0,0} инициализируются массовы это 0 или false
        // индексация массива от 0 до (указанное число -1)

        // 1. операция над массивом это узнать размер массива, т.е.
        int arrayLength = intArray.length; // 5, т.е. число, указанное в []

        // 2. операция над массивом - узнать элемент по индексу
        int firstElement = intArray[0]; // 0

        // 3. операция над массивом - присвоить элемент по индуксу
        intArray[2] = 10; // {0, 0, 10, 0, 0}

        printArray(intArray);

        // Инициализация массива — это заполнение его конкретными данными (не по умолчанию).
        int[] anotherArray = new int[]{15, 10, -6, 0, 17, 35};

        printArray(anotherArray);
        printArray(new int[]{10, -8});

        fillArray(anotherArray);
    }

    // determine whether the array contains odd numbers
    // Вывести элементы массива на экран (то есть, в консоль) можно, например, с помощью цикла for.
    static void printArray(int[] array) { // конкретное значение для аргумента функции, когда она вызвана
        for (int i = 0; i < array.length; i++) { // проходит все числа от 0 до array.length - 1
            System.out.print(array[i] + " "); // печать массив, содержимое всех коробочек
        }
        System.out.println();
    }

    // функция, которая считает сумму элементов массива
    static int sum(int[] array) {
        int res = 0;
        for (int i = 0; i < array.length; i++) {
            res += array[i];
        }
        return res;
    }

    // determine whether the array contains odd numbers
    static boolean hasOdds(int[] array) {
        for (int i = 0; i < array.length; i++) { // перебор элементов
            if (array[i] % 2 == 1) { // если прошли весь цикл, и не встретили, значит нет нечетных элементов
                return true; // здесь работает как break и он сильнее
            }
        }
        return false;
    }
    // сигнатура заполнения массива
    static void fillArray(int[] array) { // аргумент является ссылкой
        for (int i = 0; i < array.length; i++) {
            array[i] = i;
        }
    }

    // оператор continue - переводит на следующую операцию (break - ломает, прекращает весь цикл)
    static int sumOddLowerThan (int[] array, int max){
        int res = 0;
        for (int i = 0; i < array.length; i++) {
            if(array[i]%2==0 || array[i]<=max) // если число делится на 2 или она больше мах
                continue; // move to the next iteration
                res += array[i];
        }
        return res;
    }
}
